{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Container = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst Canvas_1 = require(\"./Canvas\");\n\nconst Particles_1 = require(\"./Particles\");\n\nconst Retina_1 = require(\"./Retina\");\n\nconst FrameManager_1 = require(\"./FrameManager\");\n\nconst Options_1 = require(\"../Options/Classes/Options\");\n\nconst Utils_1 = require(\"../Utils\");\n\nclass Container {\n  constructor(id, sourceOptions, ...presets) {\n    this.id = id;\n    this.sourceOptions = sourceOptions;\n    this.firstStart = true;\n    this.started = false;\n    this.destroyed = false;\n    this.paused = true;\n    this.lastFrameTime = 0;\n    this.pageHidden = false;\n    this.retina = new Retina_1.Retina(this);\n    this.canvas = new Canvas_1.Canvas(this);\n    this.particles = new Particles_1.Particles(this);\n    this.drawer = new FrameManager_1.FrameManager(this);\n    this.noise = {\n      generate: () => {\n        return {\n          angle: Math.random() * Math.PI * 2,\n          length: Math.random()\n        };\n      },\n      init: () => {},\n      update: () => {}\n    };\n    this.interactivity = {\n      mouse: {\n        clicking: false,\n        inside: false\n      }\n    };\n    this.bubble = {};\n    this.repulse = {\n      particles: []\n    };\n    this.attract = {\n      particles: []\n    };\n    this.plugins = new Map();\n    this.drawers = new Map();\n    this.density = 1;\n    this.options = new Options_1.Options();\n\n    for (const preset of presets) {\n      this.options.load(Utils_1.Plugins.getPreset(preset));\n    }\n\n    const shapes = Utils_1.Plugins.getSupportedShapes();\n\n    for (const type of shapes) {\n      const drawer = Utils_1.Plugins.getShapeDrawer(type);\n\n      if (drawer) {\n        this.drawers.set(type, drawer);\n      }\n    }\n\n    if (this.sourceOptions) {\n      this.options.load(this.sourceOptions);\n    }\n\n    this.fpsLimit = this.options.fpsLimit > 0 ? this.options.fpsLimit : 60;\n    this.options.setTheme(undefined);\n    this.eventListeners = new Utils_1.EventListeners(this);\n  }\n\n  play(force) {\n    const needsUpdate = this.paused || force;\n\n    if (this.firstStart && !this.options.autoPlay) {\n      this.firstStart = false;\n      return;\n    }\n\n    if (this.paused) {\n      this.paused = false;\n    }\n\n    if (needsUpdate) {\n      for (const [, plugin] of this.plugins) {\n        if (plugin.play) {\n          plugin.play();\n        }\n      }\n\n      this.lastFrameTime = performance.now();\n    }\n\n    this.draw();\n  }\n\n  pause() {\n    if (this.drawAnimationFrame !== undefined) {\n      Utils_1.Utils.cancelAnimation(this.drawAnimationFrame);\n      delete this.drawAnimationFrame;\n    }\n\n    if (this.paused) {\n      return;\n    }\n\n    for (const [, plugin] of this.plugins) {\n      if (plugin.pause) {\n        plugin.pause();\n      }\n    }\n\n    if (!this.pageHidden) {\n      this.paused = true;\n    }\n  }\n\n  draw() {\n    this.drawAnimationFrame = Utils_1.Utils.animate(timestamp => this.drawer.nextFrame(timestamp));\n  }\n\n  getAnimationStatus() {\n    return !this.paused;\n  }\n\n  setNoise(noiseOrGenerator, init, update) {\n    if (!noiseOrGenerator) {\n      return;\n    }\n\n    if (typeof noiseOrGenerator === \"function\") {\n      this.noise.generate = noiseOrGenerator;\n\n      if (init) {\n        this.noise.init = init;\n      }\n\n      if (update) {\n        this.noise.update = update;\n      }\n    } else {\n      if (noiseOrGenerator.generate) {\n        this.noise.generate = noiseOrGenerator.generate;\n      }\n\n      if (noiseOrGenerator.init) {\n        this.noise.init = noiseOrGenerator.init;\n      }\n\n      if (noiseOrGenerator.update) {\n        this.noise.update = noiseOrGenerator.update;\n      }\n    }\n  }\n\n  densityAutoParticles() {\n    if (!this.options.particles.number.density.enable) {\n      return;\n    }\n\n    this.initDensityFactor();\n    const numberOptions = this.options.particles.number;\n    const optParticlesNumber = numberOptions.value;\n    const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n    const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * this.density;\n    const particlesCount = this.particles.count;\n\n    if (particlesCount < particlesNumber) {\n      this.particles.push(Math.abs(particlesNumber - particlesCount));\n    } else if (particlesCount > particlesNumber) {\n      this.particles.removeQuantity(particlesCount - particlesNumber);\n    }\n  }\n\n  destroy() {\n    this.stop();\n    this.canvas.destroy();\n\n    for (const [, drawer] of this.drawers) {\n      if (drawer.destroy) {\n        drawer.destroy(this);\n      }\n    }\n\n    for (const key of this.drawers.keys()) {\n      this.drawers.delete(key);\n    }\n\n    this.destroyed = true;\n  }\n\n  exportImg(callback) {\n    this.exportImage(callback);\n  }\n\n  exportImage(callback, type, quality) {\n    var _a;\n\n    return (_a = this.canvas.element) === null || _a === void 0 ? void 0 : _a.toBlob(callback, type !== null && type !== void 0 ? type : \"image/png\", quality);\n  }\n\n  exportConfiguration() {\n    return JSON.stringify(this.options, undefined, 2);\n  }\n\n  refresh() {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      this.stop();\n      yield this.start();\n    });\n  }\n\n  stop() {\n    if (!this.started) {\n      return;\n    }\n\n    this.firstStart = true;\n    this.started = false;\n    this.eventListeners.removeListeners();\n    this.pause();\n    this.particles.clear();\n    this.canvas.clear();\n\n    for (const [, plugin] of this.plugins) {\n      if (plugin.stop) {\n        plugin.stop();\n      }\n    }\n\n    for (const key of this.plugins.keys()) {\n      this.plugins.delete(key);\n    }\n\n    this.particles.linksColors = new Map();\n    delete this.particles.grabLineColor;\n    delete this.particles.linksColor;\n  }\n\n  loadTheme(name) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      this.options.setTheme(name);\n      yield this.refresh();\n    });\n  }\n\n  start() {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (this.started) {\n        return;\n      }\n\n      yield this.init();\n      this.started = true;\n      this.eventListeners.addListeners();\n\n      for (const [, plugin] of this.plugins) {\n        if (plugin.startAsync !== undefined) {\n          yield plugin.startAsync();\n        } else if (plugin.start !== undefined) {\n          plugin.start();\n        }\n      }\n\n      this.play();\n    });\n  }\n\n  init() {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      this.retina.init();\n      this.canvas.init();\n      this.fpsLimit = this.options.fpsLimit > 0 ? this.options.fpsLimit : 60;\n      const availablePlugins = Utils_1.Plugins.getAvailablePlugins(this);\n\n      for (const [id, plugin] of availablePlugins) {\n        this.plugins.set(id, plugin);\n      }\n\n      for (const [, drawer] of this.drawers) {\n        if (drawer.init) {\n          yield drawer.init(this);\n        }\n      }\n\n      for (const [, plugin] of this.plugins) {\n        if (plugin.init) {\n          plugin.init(this.options);\n        } else if (plugin.initAsync !== undefined) {\n          yield plugin.initAsync(this.options);\n        }\n      }\n\n      this.canvas.windowResize();\n      this.particles.init();\n    });\n  }\n\n  initDensityFactor() {\n    const densityOptions = this.options.particles.number.density;\n\n    if (!this.canvas.element || !densityOptions.enable) {\n      return;\n    }\n\n    const canvas = this.canvas.element;\n    const pxRatio = this.retina.pixelRatio;\n    this.density = canvas.width * canvas.height / (densityOptions.factor * pxRatio * pxRatio * densityOptions.area);\n  }\n\n}\n\nexports.Container = Container;","map":{"version":3,"sources":["/Users/marcoscampos/Files/Portfolio/smartbrain/smartbrain/node_modules/tsparticles/dist/Core/Container.js"],"names":["Object","defineProperty","exports","value","Container","tslib_1","require","Canvas_1","Particles_1","Retina_1","FrameManager_1","Options_1","Utils_1","constructor","id","sourceOptions","presets","firstStart","started","destroyed","paused","lastFrameTime","pageHidden","retina","Retina","canvas","Canvas","particles","Particles","drawer","FrameManager","noise","generate","angle","Math","random","PI","length","init","update","interactivity","mouse","clicking","inside","bubble","repulse","attract","plugins","Map","drawers","density","options","Options","preset","load","Plugins","getPreset","shapes","getSupportedShapes","type","getShapeDrawer","set","fpsLimit","setTheme","undefined","eventListeners","EventListeners","play","force","needsUpdate","autoPlay","plugin","performance","now","draw","pause","drawAnimationFrame","Utils","cancelAnimation","animate","timestamp","nextFrame","getAnimationStatus","setNoise","noiseOrGenerator","densityAutoParticles","number","enable","initDensityFactor","numberOptions","optParticlesNumber","optParticlesLimit","limit","particlesNumber","min","particlesCount","count","push","abs","removeQuantity","destroy","stop","key","keys","delete","exportImg","callback","exportImage","quality","_a","element","toBlob","exportConfiguration","JSON","stringify","refresh","__awaiter","start","removeListeners","clear","linksColors","grabLineColor","linksColor","loadTheme","name","addListeners","startAsync","availablePlugins","getAvailablePlugins","initAsync","windowResize","densityOptions","pxRatio","pixelRatio","width","height","factor","area"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Container = void 0;\nconst tslib_1 = require(\"tslib\");\nconst Canvas_1 = require(\"./Canvas\");\nconst Particles_1 = require(\"./Particles\");\nconst Retina_1 = require(\"./Retina\");\nconst FrameManager_1 = require(\"./FrameManager\");\nconst Options_1 = require(\"../Options/Classes/Options\");\nconst Utils_1 = require(\"../Utils\");\nclass Container {\n    constructor(id, sourceOptions, ...presets) {\n        this.id = id;\n        this.sourceOptions = sourceOptions;\n        this.firstStart = true;\n        this.started = false;\n        this.destroyed = false;\n        this.paused = true;\n        this.lastFrameTime = 0;\n        this.pageHidden = false;\n        this.retina = new Retina_1.Retina(this);\n        this.canvas = new Canvas_1.Canvas(this);\n        this.particles = new Particles_1.Particles(this);\n        this.drawer = new FrameManager_1.FrameManager(this);\n        this.noise = {\n            generate: () => {\n                return {\n                    angle: Math.random() * Math.PI * 2,\n                    length: Math.random(),\n                };\n            },\n            init: () => {\n            },\n            update: () => {\n            },\n        };\n        this.interactivity = {\n            mouse: {\n                clicking: false,\n                inside: false,\n            },\n        };\n        this.bubble = {};\n        this.repulse = { particles: [] };\n        this.attract = { particles: [] };\n        this.plugins = new Map();\n        this.drawers = new Map();\n        this.density = 1;\n        this.options = new Options_1.Options();\n        for (const preset of presets) {\n            this.options.load(Utils_1.Plugins.getPreset(preset));\n        }\n        const shapes = Utils_1.Plugins.getSupportedShapes();\n        for (const type of shapes) {\n            const drawer = Utils_1.Plugins.getShapeDrawer(type);\n            if (drawer) {\n                this.drawers.set(type, drawer);\n            }\n        }\n        if (this.sourceOptions) {\n            this.options.load(this.sourceOptions);\n        }\n        this.fpsLimit = this.options.fpsLimit > 0 ? this.options.fpsLimit : 60;\n        this.options.setTheme(undefined);\n        this.eventListeners = new Utils_1.EventListeners(this);\n    }\n    play(force) {\n        const needsUpdate = this.paused || force;\n        if (this.firstStart && !this.options.autoPlay) {\n            this.firstStart = false;\n            return;\n        }\n        if (this.paused) {\n            this.paused = false;\n        }\n        if (needsUpdate) {\n            for (const [, plugin] of this.plugins) {\n                if (plugin.play) {\n                    plugin.play();\n                }\n            }\n            this.lastFrameTime = performance.now();\n        }\n        this.draw();\n    }\n    pause() {\n        if (this.drawAnimationFrame !== undefined) {\n            Utils_1.Utils.cancelAnimation(this.drawAnimationFrame);\n            delete this.drawAnimationFrame;\n        }\n        if (this.paused) {\n            return;\n        }\n        for (const [, plugin] of this.plugins) {\n            if (plugin.pause) {\n                plugin.pause();\n            }\n        }\n        if (!this.pageHidden) {\n            this.paused = true;\n        }\n    }\n    draw() {\n        this.drawAnimationFrame = Utils_1.Utils.animate((timestamp) => this.drawer.nextFrame(timestamp));\n    }\n    getAnimationStatus() {\n        return !this.paused;\n    }\n    setNoise(noiseOrGenerator, init, update) {\n        if (!noiseOrGenerator) {\n            return;\n        }\n        if (typeof noiseOrGenerator === \"function\") {\n            this.noise.generate = noiseOrGenerator;\n            if (init) {\n                this.noise.init = init;\n            }\n            if (update) {\n                this.noise.update = update;\n            }\n        }\n        else {\n            if (noiseOrGenerator.generate) {\n                this.noise.generate = noiseOrGenerator.generate;\n            }\n            if (noiseOrGenerator.init) {\n                this.noise.init = noiseOrGenerator.init;\n            }\n            if (noiseOrGenerator.update) {\n                this.noise.update = noiseOrGenerator.update;\n            }\n        }\n    }\n    densityAutoParticles() {\n        if (!this.options.particles.number.density.enable) {\n            return;\n        }\n        this.initDensityFactor();\n        const numberOptions = this.options.particles.number;\n        const optParticlesNumber = numberOptions.value;\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * this.density;\n        const particlesCount = this.particles.count;\n        if (particlesCount < particlesNumber) {\n            this.particles.push(Math.abs(particlesNumber - particlesCount));\n        }\n        else if (particlesCount > particlesNumber) {\n            this.particles.removeQuantity(particlesCount - particlesNumber);\n        }\n    }\n    destroy() {\n        this.stop();\n        this.canvas.destroy();\n        for (const [, drawer] of this.drawers) {\n            if (drawer.destroy) {\n                drawer.destroy(this);\n            }\n        }\n        for (const key of this.drawers.keys()) {\n            this.drawers.delete(key);\n        }\n        this.destroyed = true;\n    }\n    exportImg(callback) {\n        this.exportImage(callback);\n    }\n    exportImage(callback, type, quality) {\n        var _a;\n        return (_a = this.canvas.element) === null || _a === void 0 ? void 0 : _a.toBlob(callback, type !== null && type !== void 0 ? type : \"image/png\", quality);\n    }\n    exportConfiguration() {\n        return JSON.stringify(this.options, undefined, 2);\n    }\n    refresh() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            this.stop();\n            yield this.start();\n        });\n    }\n    stop() {\n        if (!this.started) {\n            return;\n        }\n        this.firstStart = true;\n        this.started = false;\n        this.eventListeners.removeListeners();\n        this.pause();\n        this.particles.clear();\n        this.canvas.clear();\n        for (const [, plugin] of this.plugins) {\n            if (plugin.stop) {\n                plugin.stop();\n            }\n        }\n        for (const key of this.plugins.keys()) {\n            this.plugins.delete(key);\n        }\n        this.particles.linksColors = new Map();\n        delete this.particles.grabLineColor;\n        delete this.particles.linksColor;\n    }\n    loadTheme(name) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            this.options.setTheme(name);\n            yield this.refresh();\n        });\n    }\n    start() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (this.started) {\n                return;\n            }\n            yield this.init();\n            this.started = true;\n            this.eventListeners.addListeners();\n            for (const [, plugin] of this.plugins) {\n                if (plugin.startAsync !== undefined) {\n                    yield plugin.startAsync();\n                }\n                else if (plugin.start !== undefined) {\n                    plugin.start();\n                }\n            }\n            this.play();\n        });\n    }\n    init() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            this.retina.init();\n            this.canvas.init();\n            this.fpsLimit = this.options.fpsLimit > 0 ? this.options.fpsLimit : 60;\n            const availablePlugins = Utils_1.Plugins.getAvailablePlugins(this);\n            for (const [id, plugin] of availablePlugins) {\n                this.plugins.set(id, plugin);\n            }\n            for (const [, drawer] of this.drawers) {\n                if (drawer.init) {\n                    yield drawer.init(this);\n                }\n            }\n            for (const [, plugin] of this.plugins) {\n                if (plugin.init) {\n                    plugin.init(this.options);\n                }\n                else if (plugin.initAsync !== undefined) {\n                    yield plugin.initAsync(this.options);\n                }\n            }\n            this.canvas.windowResize();\n            this.particles.init();\n        });\n    }\n    initDensityFactor() {\n        const densityOptions = this.options.particles.number.density;\n        if (!this.canvas.element || !densityOptions.enable) {\n            return;\n        }\n        const canvas = this.canvas.element;\n        const pxRatio = this.retina.pixelRatio;\n        this.density =\n            (canvas.width * canvas.height) / (densityOptions.factor * pxRatio * pxRatio * densityOptions.area);\n    }\n}\nexports.Container = Container;\n"]},"metadata":{},"sourceType":"script"}