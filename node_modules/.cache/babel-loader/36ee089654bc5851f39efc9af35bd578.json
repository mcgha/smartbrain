{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Canvas = void 0;\n\nconst Utils_1 = require(\"../Utils\");\n\nclass Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  init() {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n\n    this.resize();\n    const options = this.container.options;\n    const element = this.element;\n\n    if (element) {\n      if (options.backgroundMode.enable) {\n        this.originalStyle = Utils_1.Utils.deepExtend({}, element.style);\n        element.style.position = \"fixed\";\n        element.style.zIndex = options.backgroundMode.zIndex.toString(10);\n        element.style.top = \"0\";\n        element.style.left = \"0\";\n        element.style.width = \"100%\";\n        element.style.height = \"100%\";\n      } else {\n        element.style.position = (_b = (_a = this.originalStyle) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : \"\";\n        element.style.zIndex = (_d = (_c = this.originalStyle) === null || _c === void 0 ? void 0 : _c.zIndex) !== null && _d !== void 0 ? _d : \"\";\n        element.style.top = (_f = (_e = this.originalStyle) === null || _e === void 0 ? void 0 : _e.top) !== null && _f !== void 0 ? _f : \"\";\n        element.style.left = (_h = (_g = this.originalStyle) === null || _g === void 0 ? void 0 : _g.left) !== null && _h !== void 0 ? _h : \"\";\n        element.style.width = (_k = (_j = this.originalStyle) === null || _j === void 0 ? void 0 : _j.width) !== null && _k !== void 0 ? _k : \"\";\n        element.style.height = (_m = (_l = this.originalStyle) === null || _l === void 0 ? void 0 : _l.height) !== null && _m !== void 0 ? _m : \"\";\n      }\n    }\n\n    const cover = options.backgroundMask.cover;\n    const color = cover.color;\n    const trail = options.particles.move.trail;\n    const coverRgb = Utils_1.ColorUtils.colorToRgb(color);\n    this.coverColor = coverRgb !== undefined ? {\n      r: coverRgb.r,\n      g: coverRgb.g,\n      b: coverRgb.b,\n      a: cover.opacity\n    } : undefined;\n    this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n    this.initBackground();\n    this.paint();\n  }\n\n  loadCanvas(canvas, generatedCanvas) {\n    var _a;\n\n    if (!canvas.className) {\n      canvas.className = Utils_1.Constants.canvasClass;\n    }\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : this.generatedCanvas;\n    this.element = canvas;\n    this.originalStyle = Utils_1.Utils.deepExtend({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this.context = this.element.getContext(\"2d\");\n    this.container.retina.init();\n    this.initBackground();\n  }\n\n  destroy() {\n    var _a;\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    if (this.context) {\n      Utils_1.CanvasUtils.clear(this.context, this.size);\n    }\n  }\n\n  resize() {\n    if (!this.element) {\n      return;\n    }\n\n    this.element.width = this.size.width;\n    this.element.height = this.size.height;\n  }\n\n  paint() {\n    const options = this.container.options;\n\n    if (!this.context) {\n      return;\n    }\n\n    if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n      Utils_1.CanvasUtils.clear(this.context, this.size);\n      this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor, this.coverColor.a));\n    } else {\n      this.paintBase();\n    }\n  }\n\n  clear() {\n    const options = this.container.options;\n    const trail = options.particles.move.trail;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n      this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n    } else if (this.context) {\n      Utils_1.CanvasUtils.clear(this.context, this.size);\n    }\n  }\n\n  windowResize() {\n    if (!this.element) {\n      return;\n    }\n\n    const container = this.container;\n    const options = container.options;\n    const pxRatio = container.retina.pixelRatio;\n    container.canvas.size.width = this.element.offsetWidth * pxRatio;\n    container.canvas.size.height = this.element.offsetHeight * pxRatio;\n    this.element.width = container.canvas.size.width;\n    this.element.height = container.canvas.size.height;\n\n    if (!options.particles.move.enable) {\n      container.particles.redraw();\n    }\n\n    container.densityAutoParticles();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.resize !== undefined) {\n        plugin.resize();\n      }\n    }\n  }\n\n  drawConnectLine(p1, p2) {\n    var _a;\n\n    const lineStyle = this.lineStyle(p1, p2);\n\n    if (!lineStyle) {\n      return;\n    }\n\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n  }\n\n  drawGrabLine(particle, lineColor, opacity, mousePos) {\n    var _a;\n\n    const container = this.container;\n    const ctx = container.canvas.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    const beginPos = particle.getPosition();\n    Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n  }\n\n  drawParticleShadow(particle, mousePos) {\n    if (!this.context) {\n      return;\n    }\n\n    Utils_1.CanvasUtils.drawParticleShadow(this.container, this.context, particle, mousePos);\n  }\n\n  drawLinkTriangle(p1, link1, link2) {\n    var _a, _b;\n\n    const container = this.container;\n    const options = container.options;\n    const p2 = link1.destination;\n    const p3 = link2.destination;\n    const triangleOptions = p1.particlesOptions.links.triangles;\n    const opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    const pos3 = p3.getPosition();\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    let colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n\n    if (!colorTriangle) {\n      const linksOptions = p1.particlesOptions.links;\n      const linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n      colorTriangle = Utils_1.ColorUtils.getLinkColor(p1, p2, linkColor);\n    }\n\n    if (!colorTriangle) {\n      return;\n    }\n\n    const width = (_b = p1.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth;\n    Utils_1.CanvasUtils.drawLinkTriangle(ctx, width, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n  }\n\n  drawLinkLine(p1, link) {\n    var _a, _b;\n\n    const container = this.container;\n    const options = container.options;\n    const p2 = link.destination;\n    let opacity = link.opacity;\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    let colorLine;\n    const twinkle = p1.particlesOptions.twinkle.lines;\n\n    if (twinkle.enable) {\n      const twinkleFreq = twinkle.frequency;\n      const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n      const twinkling = Math.random() < twinkleFreq;\n\n      if (twinkling && twinkleRgb !== undefined) {\n        colorLine = twinkleRgb;\n        opacity = twinkle.opacity;\n      }\n    }\n\n    if (!colorLine) {\n      const linksOptions = p1.particlesOptions.links;\n      const linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n      colorLine = Utils_1.ColorUtils.getLinkColor(p1, p2, linkColor);\n    }\n\n    if (!colorLine) {\n      return;\n    }\n\n    const width = (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth;\n    const maxDistance = (_b = p1.linksDistance) !== null && _b !== void 0 ? _b : container.retina.linksDistance;\n    Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.particlesOptions.links.shadow);\n  }\n\n  drawParticle(particle, delta) {\n    var _a, _b, _c, _d;\n\n    if (((_a = particle.image) === null || _a === void 0 ? void 0 : _a.loaded) === false || particle.spawning || particle.destroyed) {\n      return;\n    }\n\n    const pfColor = particle.getFillColor();\n    const psColor = (_b = particle.getStrokeColor()) !== null && _b !== void 0 ? _b : pfColor;\n\n    if (!pfColor && !psColor) {\n      return;\n    }\n\n    const container = this.container;\n    const options = container.options;\n    const particles = container.particles;\n    const pOptions = particle.particlesOptions;\n    const twinkle = pOptions.twinkle.particles;\n    const twinkleFreq = twinkle.frequency;\n    const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n    const twinkling = twinkle.enable && Math.random() < twinkleFreq;\n    const radius = particle.getRadius();\n    const opacity = twinkling ? twinkle.opacity : (_c = particle.bubble.opacity) !== null && _c !== void 0 ? _c : particle.opacity.value;\n    const infectionStage = particle.infecter.infectionStage;\n    const infection = options.infection;\n    const infectionStages = infection.stages;\n    const infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n    const infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n    const fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : pfColor ? Utils_1.ColorUtils.hslToRgb(pfColor) : undefined;\n    const sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : psColor ? Utils_1.ColorUtils.hslToRgb(psColor) : undefined;\n    const fillColorValue = fColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(fColor, opacity) : undefined;\n\n    if (!this.context || !fillColorValue && !sColor) {\n      return;\n    }\n\n    const strokeColorValue = sColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(sColor, (_d = particle.stroke.opacity) !== null && _d !== void 0 ? _d : opacity) : fillColorValue;\n\n    if (particle.links.length > 0) {\n      this.context.save();\n      const p1Links = particle.links.filter(l => {\n        const linkFreq = container.particles.getLinkFrequency(particle, l.destination);\n        return linkFreq <= pOptions.links.frequency;\n      });\n\n      for (const link of p1Links) {\n        const p2 = link.destination;\n\n        if (pOptions.links.triangles.enable) {\n          const links = p1Links.map(l => l.destination);\n          const vertices = p2.links.filter(t => {\n            const linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n            return linkFreq <= p2.particlesOptions.links.frequency && links.indexOf(t.destination) >= 0;\n          });\n\n          if (vertices.length) {\n            for (const vertex of vertices) {\n              const p3 = vertex.destination;\n              const triangleFreq = particles.getTriangleFrequency(particle, p2, p3);\n\n              if (triangleFreq > pOptions.links.triangles.frequency) {\n                continue;\n              }\n\n              this.drawLinkTriangle(particle, link, vertex);\n            }\n          }\n        }\n\n        this.drawLinkLine(particle, link);\n      }\n\n      this.context.restore();\n    }\n\n    if (radius > 0) {\n      Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, options.backgroundMask.composite, radius, opacity, particle.particlesOptions.shadow);\n    }\n  }\n\n  drawPlugin(plugin, delta) {\n    if (!this.context) {\n      return;\n    }\n\n    Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n  }\n\n  drawLight(mousePos) {\n    if (!this.context) {\n      return;\n    }\n\n    Utils_1.CanvasUtils.drawLight(this.container, this.context, mousePos);\n  }\n\n  paintBase(baseColor) {\n    if (!this.context) {\n      return;\n    }\n\n    Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n  }\n\n  lineStyle(p1, p2) {\n    const options = this.container.options;\n    const connectOptions = options.interactivity.modes.connect;\n\n    if (this.context) {\n      return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n    }\n  }\n\n  initBackground() {\n    const options = this.container.options;\n    const background = options.background;\n    const element = this.element;\n\n    if (!element) {\n      return;\n    }\n\n    const elementStyle = element.style;\n\n    if (background.color) {\n      const color = Utils_1.ColorUtils.colorToRgb(background.color);\n\n      if (color) {\n        elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n      }\n    }\n\n    if (background.image) {\n      elementStyle.backgroundImage = background.image;\n    }\n\n    if (background.position) {\n      elementStyle.backgroundPosition = background.position;\n    }\n\n    if (background.repeat) {\n      elementStyle.backgroundRepeat = background.repeat;\n    }\n\n    if (background.size) {\n      elementStyle.backgroundSize = background.size;\n    }\n  }\n\n}\n\nexports.Canvas = Canvas;","map":{"version":3,"sources":["/Users/marcoscampos/Files/Portfolio/facerecogbrain/node_modules/tsparticles/dist/Core/Canvas.js"],"names":["Object","defineProperty","exports","value","Canvas","Utils_1","require","constructor","container","size","height","width","context","generatedCanvas","init","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","resize","options","element","backgroundMode","enable","originalStyle","Utils","deepExtend","style","position","zIndex","toString","top","left","cover","backgroundMask","color","trail","particles","move","coverRgb","ColorUtils","colorToRgb","coverColor","undefined","r","g","b","a","opacity","trailFillColor","fillColor","initBackground","paint","loadCanvas","canvas","className","Constants","canvasClass","remove","offsetHeight","offsetWidth","getContext","retina","destroy","CanvasUtils","clear","paintBase","getStyleFromRgb","length","windowResize","pxRatio","pixelRatio","redraw","densityAutoParticles","plugin","plugins","drawConnectLine","p1","p2","lineStyle","ctx","pos1","getPosition","pos2","linksWidth","drawGrabLine","particle","lineColor","mousePos","beginPos","drawParticleShadow","drawLinkTriangle","link1","link2","destination","p3","triangleOptions","particlesOptions","links","triangles","opacityTriangle","pos3","colorTriangle","linksOptions","linkColor","id","linksColors","get","linksColor","getLinkColor","composite","drawLinkLine","link","colorLine","twinkle","lines","twinkleFreq","frequency","twinkleRgb","twinkling","Math","random","maxDistance","linksDistance","warp","shadow","drawParticle","delta","image","loaded","spawning","destroyed","pfColor","getFillColor","psColor","getStrokeColor","pOptions","radius","getRadius","bubble","infectionStage","infecter","infection","infectionStages","stages","infectionColor","infectionRgb","fColor","hslToRgb","sColor","fillColorValue","strokeColorValue","stroke","save","p1Links","filter","l","linkFreq","getLinkFrequency","map","vertices","t","indexOf","vertex","triangleFreq","getTriangleFrequency","restore","drawPlugin","drawLight","baseColor","connectOptions","interactivity","modes","connect","gradient","background","elementStyle","backgroundColor","backgroundImage","backgroundPosition","repeat","backgroundRepeat","backgroundSize"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Canvas = void 0;\nconst Utils_1 = require(\"../Utils\");\nclass Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this.context = null;\n        this.generatedCanvas = false;\n    }\n    init() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        this.resize();\n        const options = this.container.options;\n        const element = this.element;\n        if (element) {\n            if (options.backgroundMode.enable) {\n                this.originalStyle = Utils_1.Utils.deepExtend({}, element.style);\n                element.style.position = \"fixed\";\n                element.style.zIndex = options.backgroundMode.zIndex.toString(10);\n                element.style.top = \"0\";\n                element.style.left = \"0\";\n                element.style.width = \"100%\";\n                element.style.height = \"100%\";\n            }\n            else {\n                element.style.position = (_b = (_a = this.originalStyle) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : \"\";\n                element.style.zIndex = (_d = (_c = this.originalStyle) === null || _c === void 0 ? void 0 : _c.zIndex) !== null && _d !== void 0 ? _d : \"\";\n                element.style.top = (_f = (_e = this.originalStyle) === null || _e === void 0 ? void 0 : _e.top) !== null && _f !== void 0 ? _f : \"\";\n                element.style.left = (_h = (_g = this.originalStyle) === null || _g === void 0 ? void 0 : _g.left) !== null && _h !== void 0 ? _h : \"\";\n                element.style.width = (_k = (_j = this.originalStyle) === null || _j === void 0 ? void 0 : _j.width) !== null && _k !== void 0 ? _k : \"\";\n                element.style.height = (_m = (_l = this.originalStyle) === null || _l === void 0 ? void 0 : _l.height) !== null && _m !== void 0 ? _m : \"\";\n            }\n        }\n        const cover = options.backgroundMask.cover;\n        const color = cover.color;\n        const trail = options.particles.move.trail;\n        const coverRgb = Utils_1.ColorUtils.colorToRgb(color);\n        this.coverColor =\n            coverRgb !== undefined\n                ? {\n                    r: coverRgb.r,\n                    g: coverRgb.g,\n                    b: coverRgb.b,\n                    a: cover.opacity,\n                }\n                : undefined;\n        this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n        this.initBackground();\n        this.paint();\n    }\n    loadCanvas(canvas, generatedCanvas) {\n        var _a;\n        if (!canvas.className) {\n            canvas.className = Utils_1.Constants.canvasClass;\n        }\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : this.generatedCanvas;\n        this.element = canvas;\n        this.originalStyle = Utils_1.Utils.deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this.context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    destroy() {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        if (this.context) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n        }\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        this.element.width = this.size.width;\n        this.element.height = this.size.height;\n    }\n    paint() {\n        const options = this.container.options;\n        if (!this.context) {\n            return;\n        }\n        if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n            this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor, this.coverColor.a));\n        }\n        else {\n            this.paintBase();\n        }\n    }\n    clear() {\n        const options = this.container.options;\n        const trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n            this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n        }\n        else if (this.context) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n        }\n    }\n    windowResize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container;\n        const options = container.options;\n        const pxRatio = container.retina.pixelRatio;\n        container.canvas.size.width = this.element.offsetWidth * pxRatio;\n        container.canvas.size.height = this.element.offsetHeight * pxRatio;\n        this.element.width = container.canvas.size.width;\n        this.element.height = container.canvas.size.height;\n        if (!options.particles.move.enable) {\n            container.particles.redraw();\n        }\n        container.densityAutoParticles();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.resize !== undefined) {\n                plugin.resize();\n            }\n        }\n    }\n    drawConnectLine(p1, p2) {\n        var _a;\n        const lineStyle = this.lineStyle(p1, p2);\n        if (!lineStyle) {\n            return;\n        }\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    }\n    drawGrabLine(particle, lineColor, opacity, mousePos) {\n        var _a;\n        const container = this.container;\n        const ctx = container.canvas.context;\n        if (!ctx) {\n            return;\n        }\n        const beginPos = particle.getPosition();\n        Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    }\n    drawParticleShadow(particle, mousePos) {\n        if (!this.context) {\n            return;\n        }\n        Utils_1.CanvasUtils.drawParticleShadow(this.container, this.context, particle, mousePos);\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a, _b;\n        const container = this.container;\n        const options = container.options;\n        const p2 = link1.destination;\n        const p3 = link2.destination;\n        const triangleOptions = p1.particlesOptions.links.triangles;\n        const opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        const pos3 = p3.getPosition();\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        let colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n        if (!colorTriangle) {\n            const linksOptions = p1.particlesOptions.links;\n            const linkColor = linksOptions.id !== undefined\n                ? container.particles.linksColors.get(linksOptions.id)\n                : container.particles.linksColor;\n            colorTriangle = Utils_1.ColorUtils.getLinkColor(p1, p2, linkColor);\n        }\n        if (!colorTriangle) {\n            return;\n        }\n        const width = (_b = p1.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth;\n        Utils_1.CanvasUtils.drawLinkTriangle(ctx, width, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n    }\n    drawLinkLine(p1, link) {\n        var _a, _b;\n        const container = this.container;\n        const options = container.options;\n        const p2 = link.destination;\n        let opacity = link.opacity;\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        let colorLine;\n        const twinkle = p1.particlesOptions.twinkle.lines;\n        if (twinkle.enable) {\n            const twinkleFreq = twinkle.frequency;\n            const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n            const twinkling = Math.random() < twinkleFreq;\n            if (twinkling && twinkleRgb !== undefined) {\n                colorLine = twinkleRgb;\n                opacity = twinkle.opacity;\n            }\n        }\n        if (!colorLine) {\n            const linksOptions = p1.particlesOptions.links;\n            const linkColor = linksOptions.id !== undefined\n                ? container.particles.linksColors.get(linksOptions.id)\n                : container.particles.linksColor;\n            colorLine = Utils_1.ColorUtils.getLinkColor(p1, p2, linkColor);\n        }\n        if (!colorLine) {\n            return;\n        }\n        const width = (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth;\n        const maxDistance = (_b = p1.linksDistance) !== null && _b !== void 0 ? _b : container.retina.linksDistance;\n        Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.particlesOptions.links.shadow);\n    }\n    drawParticle(particle, delta) {\n        var _a, _b, _c, _d;\n        if (((_a = particle.image) === null || _a === void 0 ? void 0 : _a.loaded) === false || particle.spawning || particle.destroyed) {\n            return;\n        }\n        const pfColor = particle.getFillColor();\n        const psColor = (_b = particle.getStrokeColor()) !== null && _b !== void 0 ? _b : pfColor;\n        if (!pfColor && !psColor) {\n            return;\n        }\n        const container = this.container;\n        const options = container.options;\n        const particles = container.particles;\n        const pOptions = particle.particlesOptions;\n        const twinkle = pOptions.twinkle.particles;\n        const twinkleFreq = twinkle.frequency;\n        const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n        const twinkling = twinkle.enable && Math.random() < twinkleFreq;\n        const radius = particle.getRadius();\n        const opacity = twinkling ? twinkle.opacity : (_c = particle.bubble.opacity) !== null && _c !== void 0 ? _c : particle.opacity.value;\n        const infectionStage = particle.infecter.infectionStage;\n        const infection = options.infection;\n        const infectionStages = infection.stages;\n        const infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n        const infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n        const fColor = twinkling && twinkleRgb !== undefined\n            ? twinkleRgb\n            : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : (pfColor ? Utils_1.ColorUtils.hslToRgb(pfColor) : undefined);\n        const sColor = twinkling && twinkleRgb !== undefined\n            ? twinkleRgb\n            : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : (psColor ? Utils_1.ColorUtils.hslToRgb(psColor) : undefined);\n        const fillColorValue = fColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(fColor, opacity) : undefined;\n        if (!this.context || (!fillColorValue && !sColor)) {\n            return;\n        }\n        const strokeColorValue = sColor !== undefined\n            ? Utils_1.ColorUtils.getStyleFromRgb(sColor, (_d = particle.stroke.opacity) !== null && _d !== void 0 ? _d : opacity)\n            : fillColorValue;\n        if (particle.links.length > 0) {\n            this.context.save();\n            const p1Links = particle.links.filter((l) => {\n                const linkFreq = container.particles.getLinkFrequency(particle, l.destination);\n                return linkFreq <= pOptions.links.frequency;\n            });\n            for (const link of p1Links) {\n                const p2 = link.destination;\n                if (pOptions.links.triangles.enable) {\n                    const links = p1Links.map((l) => l.destination);\n                    const vertices = p2.links.filter((t) => {\n                        const linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n                        return linkFreq <= p2.particlesOptions.links.frequency && links.indexOf(t.destination) >= 0;\n                    });\n                    if (vertices.length) {\n                        for (const vertex of vertices) {\n                            const p3 = vertex.destination;\n                            const triangleFreq = particles.getTriangleFrequency(particle, p2, p3);\n                            if (triangleFreq > pOptions.links.triangles.frequency) {\n                                continue;\n                            }\n                            this.drawLinkTriangle(particle, link, vertex);\n                        }\n                    }\n                }\n                this.drawLinkLine(particle, link);\n            }\n            this.context.restore();\n        }\n        if (radius > 0) {\n            Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, options.backgroundMask.composite, radius, opacity, particle.particlesOptions.shadow);\n        }\n    }\n    drawPlugin(plugin, delta) {\n        if (!this.context) {\n            return;\n        }\n        Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n    }\n    drawLight(mousePos) {\n        if (!this.context) {\n            return;\n        }\n        Utils_1.CanvasUtils.drawLight(this.container, this.context, mousePos);\n    }\n    paintBase(baseColor) {\n        if (!this.context) {\n            return;\n        }\n        Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n    }\n    lineStyle(p1, p2) {\n        const options = this.container.options;\n        const connectOptions = options.interactivity.modes.connect;\n        if (this.context) {\n            return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n        }\n    }\n    initBackground() {\n        const options = this.container.options;\n        const background = options.background;\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (background.color) {\n            const color = Utils_1.ColorUtils.colorToRgb(background.color);\n            if (color) {\n                elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n            }\n        }\n        if (background.image) {\n            elementStyle.backgroundImage = background.image;\n        }\n        if (background.position) {\n            elementStyle.backgroundPosition = background.position;\n        }\n        if (background.repeat) {\n            elementStyle.backgroundRepeat = background.repeat;\n        }\n        if (background.size) {\n            elementStyle.backgroundSize = background.size;\n        }\n    }\n}\nexports.Canvas = Canvas;\n"]},"metadata":{},"sourceType":"script"}